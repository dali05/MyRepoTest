package com.lma.apiresponse.api.config.doc;

import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.security.SecurityScheme;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springdoc.core.customizers.GlobalOpenApiCustomizer;
import org.springdoc.core.customizers.OperationCustomizer;
import org.springdoc.core.models.GroupedOpenApi;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.web.method.HandlerMethod;

import java.lang.reflect.Method;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.mock;

@SpringBootTest
class OpenApiConfigTest {

    private SpringdocProperties props;
    private OpenApiConfig config;

    @BeforeEach
    void setUp() {
        props = Mockito.mock(SpringdocProperties.class);
        Mockito.when(props.getTitle()).thenReturn("My API");
        Mockito.when(props.getVersion()).thenReturn("1.0.0");

        config = new OpenApiConfig(props);
    }

    @Test
    void testBaseOpenApiConfiguration() {
        OpenAPI openAPI = config.baseOpenAPI();

        assertNotNull(openAPI);
        assertEquals("My API", openAPI.getInfo().getTitle());
        assertEquals("1.0.0", openAPI.getInfo().getVersion());
        assertTrue(openAPI.getComponents().getSecuritySchemes().containsKey("bearerAuth"));

        SecurityScheme scheme = openAPI.getComponents().getSecuritySchemes().get("bearerAuth");
        assertEquals(SecurityScheme.Type.HTTP, scheme.getType());
        assertEquals("bearer", scheme.getScheme());
        assertEquals("JWT", scheme.getBearerFormat());
    }

    @Test
    void testGroupedOpenApiCreation() {
        GroupedOpenApi groupedOpenApi = config.groupedOpenApi();

        assertNotNull(groupedOpenApi);
        assertEquals("public", groupedOpenApi.getGroup());
    }

    @Test
    void testDynamicTagsAddsDefaultTag() throws NoSuchMethodException {
        OperationCustomizer customizer = config.dynamicTags();
        assertNotNull(customizer);

        // Mock HandlerMethod for a fake controller
        class UserController {
            public void getUser() {}
        }

        Method method = UserController.class.getMethod("getUser");
        HandlerMethod handlerMethod = new HandlerMethod(new UserController(), method);

        var operation = new io.swagger.v3.oas.models.Operation();
        operation = customizer.customize(operation, handlerMethod);

        assertNotNull(operation.getTags());
        assertEquals(1, operation.getTags().size());
        assertEquals("User", operation.getTags().get(0));
    }

    @Test
    void testApiBeanBuildsCorrectly() {
        GlobalOpenApiCustomizer globalCustomizer = mock(GlobalOpenApiCustomizer.class);
        OperationCustomizer dynamicTags = mock(OperationCustomizer.class);

        GroupedOpenApi api = config.api(globalCustomizer, dynamicTags);

        assertNotNull(api);
        assertEquals("public", api.getGroup());
    }

    @Test
    void testGlobalHeadersAndErrorsCustomizerNotNull() {
        GlobalOpenApiCustomizer customizer = config.globalHeadersAndErrors();
        assertNotNull(customizer);
    }
}
