package com.lma.apiresponse.api.response;

import org.junit.jupiter.api.Test;

import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;

class MetaBuilderTest {

    @Test
    void testCreate_shouldContainTimestampAndRequestId() {
        Map<String, Object> meta = MetaBuilder.create().build();

        assertNotNull(meta.get("timestamp"));
        assertNotNull(meta.get("requestId"));
        assertTrue(meta.get("timestamp") instanceof String);
        assertTrue(meta.get("requestId") instanceof String);
    }

    @Test
    void testPut_shouldAddKeyValue() {
        MetaBuilder builder = new MetaBuilder()
                .put("env", "test");

        Map<String, Object> result = builder.build();
        assertEquals("test", result.get("env"));
    }

    @Test
    void testPutIfPresent_shouldAddOnlyIfNotNull() {
        MetaBuilder builder = new MetaBuilder()
                .putIfPresent("key1", "value1")
                .putIfPresent("key2", null);

        Map<String, Object> result = builder.build();
        assertEquals(1, result.size());
        assertEquals("value1", result.get("key1"));
        assertFalse(result.containsKey("key2"));
    }

    @Test
    void testPagination_shouldAddPaginationInfo() {
        MetaBuilder builder = new MetaBuilder()
                .pagination(2, 10, 55);

        Map<String, Object> result = builder.build();

        assertTrue(result.containsKey("pagination"));
        Map<String, Object> pagination = (Map<String, Object>) result.get("pagination");

        assertEquals(2L, pagination.get("page"));
        assertEquals(10L, pagination.get("size"));
        assertEquals(55L, pagination.get("total"));
    }

    @Test
    void testCombineMethods_shouldBuildFullMeta() {
        MetaBuilder builder = MetaBuilder.create()
                .put("version", "1.0")
                .putIfPresent("author", "LMA")
                .pagination(1, 20, 100);

        Map<String, Object> meta = builder.build();

        assertTrue(meta.containsKey("timestamp"));
        assertTrue(meta.containsKey("requestId"));
        assertTrue(meta.containsKey("pagination"));
        assertEquals("1.0", meta.get("version"));
        assertEquals("LMA", meta.get("author"));

        Map<String, Object> pagination = (Map<String, Object>) meta.get("pagination");
        assertEquals(1L, pagination.get("page"));
        assertEquals(20L, pagination.get("size"));
        assertEquals(100L, pagination.get("total"));
    }
}


