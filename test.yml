import com.bnpp.pf.walle.admin.enums.NotificationType;
import com.bnpp.pf.walle.admin.exception.NotFoundException;

...

@Test
void testVerifyRequiredItems_API_AllFieldsPresent() {
    ConfigRequestDto dto = new ConfigRequestDto();
    dto.setNotification(NotificationType.API);
    dto.setCallbackUrl("https://callback");
    dto.setNotifAuthMode("BASIC");
    dto.setAuthTokenUrl("https://auth");

    assertDoesNotThrow(() -> invokeVerifyRequiredItems(dto));
}

@Test
void testVerifyRequiredItems_API_MissingCallbackUrl() {
    ConfigRequestDto dto = new ConfigRequestDto();
    dto.setNotification(NotificationType.API);
    dto.setNotifAuthMode("BASIC");
    dto.setAuthTokenUrl("https://auth");

    assertThrows(NotFoundException.class, () -> invokeVerifyRequiredItems(dto));
}

@Test
void testVerifyRequiredItems_API_MissingNotifAuthMode() {
    ConfigRequestDto dto = new ConfigRequestDto();
    dto.setNotification(NotificationType.API);
    dto.setCallbackUrl("https://callback");
    dto.setAuthTokenUrl("https://auth");

    assertThrows(NotFoundException.class, () -> invokeVerifyRequiredItems(dto));
}

@Test
void testVerifyRequiredItems_API_MissingAuthTokenUrl() {
    ConfigRequestDto dto = new ConfigRequestDto();
    dto.setNotification(NotificationType.API);
    dto.setCallbackUrl("https://callback");
    dto.setNotifAuthMode("BASIC");

    assertThrows(NotFoundException.class, () -> invokeVerifyRequiredItems(dto));
}

@Test
void testVerifyRequiredItems_KAFKA_MissingTopicUrl() {
    ConfigRequestDto dto = new ConfigRequestDto();
    dto.setNotification(NotificationType.KAFKA);

    assertThrows(NotFoundException.class, () -> invokeVerifyRequiredItems(dto));
}

@Test
void testVerifyRequiredItems_KAFKA_AllFieldsPresent() {
    ConfigRequestDto dto = new ConfigRequestDto();
    dto.setNotification(NotificationType.KAFKA);
    dto.setTopicUrl("topic-test");

    assertDoesNotThrow(() -> invokeVerifyRequiredItems(dto));
}

/**
 * Utilitaire pour invoquer la méthode privée verifyRequiredItems via réflexion.
 */
private void invokeVerifyRequiredItems(ConfigRequestDto dto) {
    try {
        var method = ConfigServiceImpl.class.getDeclaredMethod("verifyRequiredItems", ConfigRequestDto.class);
        method.setAccessible(true);
        method.invoke(null, dto); // méthode statique
    } catch (Exception e) {
        // Si l'exception est encapsulée dans InvocationTargetException, on la relance proprement
        if (e.getCause() instanceof RuntimeException) {
            throw (RuntimeException) e.getCause();
        }
        fail("Erreur lors de l'appel de verifyRequiredItems: " + e);
    }
}