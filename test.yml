import com.ibm.cloud.objectstorage.services.s3.AmazonS3;
import com.ibm.cloud.objectstorage.services.s3.model.GetObjectRequest;
import com.ibm.cloud.objectstorage.services.s3.model.PutObjectRequest;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Service;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

@Service
public class StorageService {

    private final AmazonS3 s3Client;

    @Value("${storage.bucket}")
    private String bucketName;

    public StorageService(AmazonS3 s3Client) {
        this.s3Client = s3Client;
    }

    public String uploadFile(MultipartFile file) throws IOException {
        // Convertir MultipartFile en File
        File convFile = convertMultiPartToFile(file);
        String key = file.getOriginalFilename();

        s3Client.putObject(new PutObjectRequest(bucketName, key, convFile));
        convFile.delete();

        return "File uploaded : " + key;
    }

    public InputStream downloadFile(String key) {
        return s3Client.getObject(new GetObjectRequest(bucketName, key))
                       .getObjectContent();
    }

    private File convertMultiPartToFile(MultipartFile file) throws IOException {
        File convFile = File.createTempFile("upload", null);
        try (FileOutputStream fos = new FileOutputStream(convFile)) {
            fos.write(file.getBytes());
        }
        return convFile;
    }
}



import org.springframework.http.HttpHeaders;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.IOException;
import java.io.InputStream;

@RestController
@RequestMapping("/files")
public class StorageController {

    private final StorageService storageService;

    public StorageController(StorageService storageService) {
        this.storageService = storageService;
    }

    @PostMapping("/upload")
    public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file) {
        try {
            String message = storageService.uploadFile(file);
            return ResponseEntity.ok(message);
        } catch (IOException e) {
            return ResponseEntity.status(500).body("Error uploading file: " + e.getMessage());
        }
    }

    @GetMapping("/download/{key}")
    public ResponseEntity<byte[]> downloadFile(@PathVariable String key) {
        try (InputStream is = storageService.downloadFile(key)) {
            byte[] content = is.readAllBytes();

            return ResponseEntity.ok()
                    .header(HttpHeaders.CONTENT_DISPOSITION, "attachment; filename=" + key)
                    .contentType(MediaType.APPLICATION_OCTET_STREAM)
                    .body(content);
        } catch (IOException e) {
            return ResponseEntity.status(500).build();
        }
    }
}


import com.ibm.cloud.objectstorage.services.s3.model.ObjectListing;
import com.ibm.cloud.objectstorage.services.s3.model.S3ObjectSummary;

// ...

public List<String> listFiles() {
    List<String> files = new ArrayList<>();
    ObjectListing objectListing = s3Client.listObjects(bucketName);

    for (S3ObjectSummary os : objectListing.getObjectSummaries()) {
        files.add(os.getKey());
    }
    return files;
}



import java.util.List;

// ...

@GetMapping("/list")
public ResponseEntity<List<String>> listFiles() {
    List<String> files = storageService.listFiles();
    return ResponseEntity.ok(files);
}



