# üöÄ API Response Starter

**API Response Starter** is a modular **Spring Boot library (JAR)** designed to be included as a dependency in other microservices.  
It provides unified API response handling, error management, observability, and auto-configuration for PostgreSQL, Kafka (Avro), Vault, and S3-compatible storage.

---

## üß± Project Overview

This project acts as an **internal Spring Boot Starter**, meaning it auto-configures common concerns when added as a dependency to other services.

```
com.lma.apiresponse
‚îú‚îÄ‚îÄ api
‚îÇ   ‚îú‚îÄ‚îÄ annotation         ‚Üí @NoWrap annotation to skip response wrapping
‚îÇ   ‚îú‚îÄ‚îÄ config             ‚Üí Web / OpenAPI configuration
‚îÇ   ‚îú‚îÄ‚îÄ exception          ‚Üí Global exception handling
‚îÇ   ‚îî‚îÄ‚îÄ response           ‚Üí Unified API response structure
‚îÇ
‚îú‚îÄ‚îÄ datasource             ‚Üí Common PostgreSQL properties & auto-config
‚îú‚îÄ‚îÄ kafka                  ‚Üí Kafka + Avro + Schema Registry configuration
‚îú‚îÄ‚îÄ logging                ‚Üí MDC filter for request context logging
‚îú‚îÄ‚îÄ storage                ‚Üí S3 storage (IBM COS compatible)
‚îî‚îÄ‚îÄ vault                  ‚Üí Vault auto-configuration switch
```

---

## ‚öôÔ∏è Technologies

| Category | Stack |
|-----------|--------|
| **Framework** | Spring Boot 3.5.x |
| **Language** | Java 21 |
| **Documentation** | Springdoc OpenAPI 3 / Swagger UI |
| **Database** | PostgreSQL + Spring Data JPA |
| **Messaging** | Apache Kafka + Avro + Confluent Schema Registry |
| **Storage** | IBM COS / S3 |
| **Secrets** | Spring Cloud Vault |
| **Logging** | Logback + MDC + Logstash JSON Encoder |
| **Build Tool** | Maven |
| **Packaging** | JAR (Starter dependency) |

---

## üß© Key Features

### ‚úÖ Unified API Responses

All controller responses are automatically wrapped into a consistent structure:

```json
{
  "type": "SUCCESS",
  "status": 200,
  "data": { ... },
  "meta": {
    "timestamp": "2025-10-17T12:34:56Z",
    "requestId": "uuid-1234"
  }
}
```

> Use `@NoWrap` on controllers or methods to return raw responses without wrapping.

---

### ‚ùå Centralized Error Handling

Exceptions extending `ApiException` are automatically handled by the global `GlobalExceptionHandler`.

Example error payload:

```json
{
  "type": "business_error",
  "title": "Business rule violated",
  "status": 422,
  "instance": "/api/users",
  "detail": "Insufficient balance",
  "traceId": "d5d3c1a4-0c12-45df-bb6f-97f74e8cfb21",
  "extensions": {
    "code": "BIZ-003"
  }
}
```

---

### üìñ OpenAPI (Swagger) Documentation

Accessible automatically at:
- **Swagger UI:** `/api/docs`
- **OpenAPI Spec:** `/api/openapi`

Features:
- Common headers (`X-Correlation-Id`, `Accept-Language`)
- Standardized error responses (400, 401, 403, 500)
- Automatic tagging per controller

---

### üóÑÔ∏è PostgreSQL Configuration

Auto-configured through:
```yaml
common:
  postgres:
    enabled: true
    schema: my_schema
    showSql: true
```

> Database credentials (URL, username, password) are managed via **Vault** ‚Äî no hardcoded values required.

---

### ‚òÅÔ∏è S3 Object Storage (IBM COS Compatible)

Automatically configures a storage service for S3-compatible endpoints:

```yaml
common:
  storage:
    enabled: true
    endpoint: https://s3.eu-de.cloud-object-storage.appdomain.cloud
    region: eu-de
    bucket: my-bucket
```

> Access keys and secrets are resolved via Vault.

---

### üì® Kafka + Avro Support

Auto-configures producers and consumers with Confluent Schema Registry support.

```yaml
common:
  kafka:
    enabled: true
    groupId: my-app-group
    appId: my-app
    broker:
      bootstrapServers: localhost:9092
    schemaRegistry:
      url: http://localhost:8081
```

> SSL configuration and sensitive credentials are automatically fetched from Vault.

---

### üîê Vault Integration

This starter automatically activates Spring Cloud Vault support:

```yaml
common.vault.enabled: true
spring.config.import: vault://
```

Any secret (database credentials, Kafka SSL, S3 access keys, etc.) is securely retrieved from Vault.

---

### üßæ Logging Context Enrichment

The `MdcEnricherFilter` automatically adds contextual data to logs for better traceability:

- `userId`, `usecase`
- `http.method`, `http.path`

Example MDC-enriched log (JSON):
```json
{
  "timestamp": "2025-10-17T12:34:56Z",
  "level": "INFO",
  "message": "Request processed successfully",
  "userId": "user-123",
  "usecase": "account-creation",
  "http.method": "POST",
  "http.path": "/api/accounts"
}
```

---

## üß∞ How to Use

### Step 1 ‚Äî Add Dependency

In your target project‚Äôs `pom.xml`:

```xml
<dependency>
    <groupId>com.lma</groupId>
    <artifactId>api-response</artifactId>
    <version>0.0.1-SNAPSHOT</version>
</dependency>
```

### Step 2 ‚Äî Enable Configurations (if needed)

Simply include the relevant property groups:

```yaml
common:
  postgres:
    enabled: true
  kafka:
    enabled: true
  storage:
    enabled: true
  vault:
    enabled: true
```

No manual setup required ‚Äî the starter‚Äôs auto-configurations will activate automatically.

---

## üß™ Testing Locally

To build and test the starter:

```bash
mvn clean install
```

Then, include it in another project and start that application with:
```bash
mvn spring-boot:run
```

---

## üì¶ Build & Packaging

| Property | Value |
|-----------|--------|
| **Packaging** | JAR |
| **Java Version** | 21 |
| **Build Tool** | Maven 3.9+ |
| **Spring Boot** | 3.5.6 |
| **Spring Cloud** | 2025.0.0 |

### Useful Commands

| Command | Description |
|----------|-------------|
| `mvn clean install` | Build and install the starter locally |
| `mvn package` | Create a JAR for distribution |
| `mvn test` | Run all tests |

---

## üß† Author & Maintenance

**Author:** LMA Engineering  
**Version:** 0.0.1-SNAPSHOT  
**License:** Proprietary / Internal  
**Contact:** team@lma.com

---

## üßæ Roadmap

- [ ] Provide sample microservice using this starter  
- [ ] Add OpenTelemetry tracing auto-config  
- [ ] Publish as internal Maven artifact (Nexus/Artifactory)  
- [ ] Extend with optional Redis and Elasticsearch support  

---

> üí° **Tip:** Use this project as a **Spring Boot Starter dependency** to enforce consistent API standards, error models, and infrastructure configurations across all internal microservices.


# üßæ Changelog ‚Äî API Response Starter

All notable changes to this project will be documented in this file.  
This project follows the **Keep a Changelog** format and adheres to **Semantic Versioning (SemVer)**.

---

## [0.0.1] ‚Äî 2025-10-17
### üéâ Initial Release

The **first release** of **API Response Starter**, a modular and reusable Spring Boot library designed for consistent API behavior, unified error handling, and infrastructure auto-configuration.

#### üß± Core Features

- **Unified API Response Model**
  - Automatic wrapping of all successful API responses into a standardized structure.
  - `@NoWrap` annotation to bypass wrapping for specific endpoints.

- **Global Exception Handling**
  - Centralized error management with consistent JSON error payloads.
  - Includes `ApiException`, `BusinessRuleException`, and `NotFoundException`.
  - Custom error codes (`BIZ-001`, `RES-404`, etc.) following a business-oriented catalog.

- **OpenAPI / Swagger Documentation**
  - Auto-generated documentation with global headers and common error codes.
  - Configurable via `springdoc` properties.
  - Ready-to-use Swagger UI (`/api/docs`) and OpenAPI spec (`/api/openapi`).

- **Common PostgreSQL Configuration**
  - Auto-configuration for Spring Data JPA and Hibernate schema.
  - Toggleable via `common.postgres.enabled` and `common.postgres.showSql`.
  - Schema name management through `common.postgres.schema`.

- **Kafka + Avro Integration**
  - Built-in producer/consumer factories using Confluent Avro serializers.
  - Integrated Schema Registry configuration with optional SSL.
  - Supports idempotent producers and secure message deserialization.

- **IBM COS / S3 Storage Support**
  - Simplified abstraction for uploading, downloading, and listing files.
  - Fully integrated with IBM Cloud Object Storage (S3-compatible).
  - Configuration through `common.storage.*` properties.

- **Spring Cloud Vault Integration**
  - Automatic activation of `spring.config.import=vault://` when enabled.
  - Secrets (DB, Kafka, S3) are retrieved securely from Vault.
  - Reduces manual configuration of credentials and keys.

- **Logging Context (MDC)**
  - Automatic enrichment of logs with contextual data:
    - `userId`, `usecase`, `http.method`, `http.path`
  - Fully compatible with JSON logging and Logstash pipelines.

#### ‚öôÔ∏è Technical Enhancements

- Java 21 baseline
- Spring Boot 3.5.6 compatibility
- Spring Cloud 2025.0.0 integration
- Maven build with annotation processing (Lombok, MapStruct)
- WAR packaging switched to **JAR** for library usage
- Tested for Tomcat and embedded Spring Boot environments

#### üß© Provided Auto-Configuration Modules

| Module | Description |
|---------|--------------|
| `DataSourceCommonAutoConfiguration` | Shared PostgreSQL setup |
| `KafkaAvroAutoConfiguration` | Kafka + Avro + Schema Registry |
| `S3StorageAutoConfiguration` | S3-compatible object storage |
| `VaultAutoConfiguration` | Vault activation switch |
| `CommonApiAutoConfiguration` | Core API response and body advice |

#### üß™ Quality & Testing

- JUnit 5 base test setup via `spring-boot-starter-test`
- Maven Surefire integration for build validation
- Verified with local PostgreSQL and Kafka environments

#### üìö Documentation

- `README.md` for project overview and usage as a dependency.
- Swagger integration for runtime API documentation.
- Built-in annotations and comments for developer clarity.

---

## üîÆ Future Plans

- Add OpenTelemetry tracing integration.
- Introduce a demo microservice using the starter.
- Publish artifact to internal Maven repository (Nexus / Artifactory).
- Add Redis and Elasticsearch optional modules.
- Enhance Vault integration for dynamic credentials rotation.

---

## üìÖ Release Metadata

| Field | Value |
|-------|--------|
| **Version** | 0.0.1 |
| **Release Date** | 2025-10-17 |
| **Packaging** | JAR |
| **Java Version** | 21 |
| **Spring Boot** | 3.5.6 |
| **Maintainer** | LMA Engineering |
| **License** | Proprietary / Internal |

---

> üí° **Note:** This version marks the baseline of the *API Response Starter* as a reusable Spring Boot library, setting the foundation for internal API standardization and observability.

