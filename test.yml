package com.bnpp.pf.common.api.config;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;

import static org.mockito.Mockito.*;

class ApiPrefixConfigTest {

    private ApiPrefixConfig config;
    private PathMatchConfigurer configurer;
    private ApiPrefixProperties props;

    @BeforeEach
    void setUp() {
        props = new ApiPrefixProperties();
        props.setPrefix("/api");
        props.setControllerPath("com.bnpp.pf.common.api.controller");
        props.setEnabled(true);

        config = new ApiPrefixConfig(props);
        configurer = mock(PathMatchConfigurer.class);
    }

    @Test
    void shouldAddApiPrefixWithPredicate() {
        config.configurePathMatch(configurer);

        verify(configurer, times(1))
                .addPathPrefix(eq("/api"), any());
    }

    @Test
    void predicate_shouldReturnTrue_forControllerInConfiguredPackage() {
        // recrée la même lambda que dans configurePathMatch
        var predicate = (java.util.function.Predicate<Class<?>>)
                c -> c.isAnnotationPresent(RestController.class)
                        && c.getPackageName().startsWith(props.getControllerPath());

        @RestController
        class DummyController {}
        boolean result = predicate.test(DummyController.class);

        assert result;
    }

    @Test
    void predicate_shouldReturnFalse_forClassWithoutAnnotation() {
        var predicate = (java.util.function.Predicate<Class<?>>)
                c -> c.isAnnotationPresent(RestController.class)
                        && c.getPackageName().startsWith(props.getControllerPath());

        class NotController {}
        boolean result = predicate.test(NotController.class);

        assert !result;
    }

    @Test
    void predicate_shouldReturnFalse_forWrongPackage() {
        @RestController
        class OtherController {}
        var predicate = (java.util.function.Predicate<Class<?>>)
                c -> c.isAnnotationPresent(RestController.class)
                        && c.getPackageName().startsWith(props.getControllerPath());

        boolean result = predicate.test(OtherController.class);

        assert !result;
    }
}