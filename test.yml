spring:
  profiles: dev

storage:
  endpoint: https://s3.eu-de.cloud-object-storage.appdomain.cloud
  location: eu-de
  apiKey: ${IBM_COS_APIKEY}
  resourceInstanceId: ${IBM_COS_RESOURCE_INSTANCE}
  bucket: my-dev-bucket


import com.ibm.cloud.objectstorage.ClientConfiguration;
import com.ibm.cloud.objectstorage.SDKGlobalConfiguration;
import com.ibm.cloud.objectstorage.auth.AWSStaticCredentialsProvider;
import com.ibm.cloud.objectstorage.auth.BasicAWSCredentials;
import com.ibm.cloud.objectstorage.auth.BasicIBMOAuthCredentials;
import com.ibm.cloud.objectstorage.services.s3.AmazonS3;
import com.ibm.cloud.objectstorage.services.s3.AmazonS3ClientBuilder;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class StorageConfig {

    @Value("${storage.endpoint}")
    private String endpoint;

    @Value("${storage.location}")
    private String location;

    @Value("${spring.profiles.active:local}")
    private String activeProfile;

    // Pour MinIO
    @Value("${storage.accessKey:}")
    private String accessKey;

    @Value("${storage.secretKey:}")
    private String secretKey;

    // Pour IBM COS
    @Value("${storage.apiKey:}")
    private String apiKey;

    @Value("${storage.resourceInstanceId:}")
    private String resourceInstanceId;

    @Bean
    public AmazonS3 s3Client() {
        ClientConfiguration clientConfig = new ClientConfiguration().withRequestTimeout(5000);

        if ("local".equals(activeProfile)) {
            // MinIO
            BasicAWSCredentials creds = new BasicAWSCredentials(accessKey, secretKey);
            return AmazonS3ClientBuilder.standard()
                    .withCredentials(new AWSStaticCredentialsProvider(creds))
                    .withEndpointConfiguration(
                            new AmazonS3ClientBuilder.EndpointConfiguration(endpoint, location))
                    .withPathStyleAccessEnabled(true)
                    .build();
        } else {
            // IBM COS
            SDKGlobalConfiguration.IAM_ENDPOINT = "https://iam.cloud.ibm.com/identity/token";
            BasicIBMOAuthCredentials creds = new BasicIBMOAuthCredentials(apiKey, resourceInstanceId);
            return AmazonS3ClientBuilder.standard()
                    .withCredentials(new AWSStaticCredentialsProvider(creds))
                    .withEndpointConfiguration(
                            new AmazonS3ClientBuilder.EndpointConfiguration(endpoint, location))
                    .withPathStyleAccessEnabled(true)
                    .withClientConfiguration(clientConfig)
                    .build();
        }
    }
}