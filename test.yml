kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8080:8080"
    depends_on:
      - broker
      - schema-registry
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: broker:29092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
      KAFKA_CLUSTERS_0_SCHEMAREGISTRY: http://schema-registry:8081



@Configuration
public class KafkaConsumerConfig {

    @Bean
    public ConsumerFactory<String, User> userConsumerFactory() {
        Map<String, Object> props = new HashMap<>();
        props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ConsumerConfig.GROUP_ID_CONFIG, "user-event-consumer");
        props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, StringDeserializer.class);
        props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, KafkaAvroDeserializer.class);
        props.put(AbstractKafkaAvroSerDeConfig.SCHEMA_REGISTRY_URL_CONFIG, "http://localhost:8081");
        props.put(KafkaAvroDeserializerConfig.SPECIFIC_AVRO_READER_CONFIG, true); // important pour mapper sur User

        return new DefaultKafkaConsumerFactory<>(props);
    }

    @Bean
    public ConcurrentKafkaListenerContainerFactory<String, User> userKafkaListenerContainerFactory() {
        ConcurrentKafkaListenerContainerFactory<String, User> factory =
                new ConcurrentKafkaListenerContainerFactory<>();
        factory.setConsumerFactory(userConsumerFactory());
        return factory;
    }
}

<?xml version="1.0" encoding="UTF-8"?>
<toolchains>
  <toolchain>
    <type>jdk</type>
    <provides>
      <version>21</version>
      <vendor>sun</vendor>
    </provides>
    <configuration>
      <jdkHome>/Library/Java/JavaVirtualMachines/jdk-21.jdk/Contents/Home</jdkHome>
    </configuration>
  </toolchain>
</toolchains>


{
  "type": "record",
  "name": "UserEvent",
  "namespace": "com.example.avro",
  "fields": [
    {
      "name": "userId",
      "type": "string"
    },
    {
      "name": "action",
      "type": {
        "type": "enum",
        "name": "ActionType",
        "symbols": ["LOGIN", "LOGOUT", "PURCHASE"]
      }
    },
    {
      "name": "timestamp",
      "type": "long",
      "logicalType": "timestamp-millis"
    }
  ]
}




spring:
  kafka:
    bootstrap-servers: localhost:9092
    properties:
      schema.registry.url: http://localhost:8081
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: io.confluent.kafka.serializers.KafkaAvroSerializer
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      group-id: user-event-consumer
      properties:
        specific.avro.reader: true


package com.example.avro;

import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;
import java.time.Instant;

@Service
public class UserEventProducer {

    private final KafkaTemplate<String, UserEvent> kafkaTemplate;

    public UserEventProducer(KafkaTemplate<String, UserEvent> kafkaTemplate) {
        this.kafkaTemplate = kafkaTemplate;
    }

    public void sendUserEvent(String userId, UserEvent.ActionType action) {
        // Cr√©ation d‚Äôun message valide selon le sch√©ma Avro
        UserEvent event = UserEvent.newBuilder()
                .setUserId(userId)
                .setAction(action)
                .setTimestamp(Instant.now().toEpochMilli())
                .build();

        // Envoi dans Kafka (le serializer Avro valide le sch√©ma automatiquement)
        kafkaTemplate.send("user-events", userId, event);
        System.out.println("‚úÖ Event envoy√©: " + event);
    }
}

package com.example.avro;

import org.apache.kafka.clients.consumer.ConsumerRecord;
import org.springframework.kafka.annotation.KafkaListener;
import org.springframework.stereotype.Service;

@Service
public class UserEventConsumer {

    @KafkaListener(topics = "user-events", groupId = "user-event-consumer")
    public void consume(ConsumerRecord<String, UserEvent> record) {
        UserEvent event = record.value();
        System.out.println("üì• Event re√ßu: " + event);
    }
}


package com.example.avro;

import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class AvroKafkaApp implements CommandLineRunner {

    private final UserEventProducer producer;

    public AvroKafkaApp(UserEventProducer producer) {
        this.producer = producer;
    }

    public static void main(String[] args) {
        SpringApplication.run(AvroKafkaApp.class, args);
    }

    @Override
    public void run(String... args) {
        producer.sendUserEvent("user123", UserEvent.ActionType.LOGIN);
        producer.sendUserEvent("user456", UserEvent.ActionType.PURCHASE);
    }
}




