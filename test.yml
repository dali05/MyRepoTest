@Test
void producerFactory_shouldIncludeSSLConfigWhenEnabled() {
    broker.getSsl().setEnabled(true);
    broker.getSsl().setTrustStoreLocation("trust.jks");
    broker.getSsl().setTrustStorePassword("pwd");
    broker.getSsl().setKeyStoreLocation("keystore.jks");
    broker.getSsl().setKeyStorePassword("kspwd");
    broker.getSsl().setKeyPassword("keypwd");

    schemaRegistry.getSsl().setEnabled(true);
    schemaRegistry.getSsl().setTrustStoreLocation("trust-schema.jks");
    schemaRegistry.getSsl().setTrustStorePassword("pwd-schema");
    schemaRegistry.getSsl().setKeyStoreLocation("keystore-schema.jks");
    schemaRegistry.getSsl().setKeyStorePassword("kspwd-schema");
    schemaRegistry.getSsl().setKeyPassword("keypwd-schema");

    ProducerFactory<String, Object> factory = config.producerFactory(props);
    Map<String, Object> conf = ((DefaultKafkaProducerFactory<String, Object>) factory).getConfigurationProperties();

    assertThat(conf)
            .containsEntry("security.protocol", "SSL")
            .containsEntry(SslConfigs.SSL_TRUSTSTORE_LOCATION_CONFIG, "trust.jks")
            .containsEntry("schema.registry.ssl.truststore.location", "trust-schema.jks");
}

@Test
void consumerFactoryAvro_shouldIncludeSSLWhenEnabled() {
    broker.getSsl().setEnabled(true);
    broker.getSsl().setTrustStoreLocation("trust.jks");
    broker.getSsl().setTrustStorePassword("pwd");
    broker.getSsl().setKeyStoreLocation("keystore.jks");
    broker.getSsl().setKeyStorePassword("kspwd");
    broker.getSsl().setKeyPassword("keypwd");

    schemaRegistry.getSsl().setEnabled(true);
    schemaRegistry.getSsl().setTrustStoreLocation("trust-schema.jks");
    schemaRegistry.getSsl().setTrustStorePassword("pwd-schema");
    schemaRegistry.getSsl().setKeyStoreLocation("keystore-schema.jks");
    schemaRegistry.getSsl().setKeyStorePassword("kspwd-schema");
    schemaRegistry.getSsl().setKeyPassword("keypwd-schema");

    Map<String, Object> map = config.consumerFactoryAvro(props);
    assertThat(map)
            .containsEntry("security.protocol", "SSL")
            .containsEntry("schema.registry.ssl.truststore.location", "trust-schema.jks");
}