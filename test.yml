package com.lma.apiresponse.api.config;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.ArgumentCaptor;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.servlet.config.annotation.PathMatchConfigurer;
import org.springframework.web.util.pattern.PathPatternParser;

import java.util.function.Predicate;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class ApiPrefixConfigTest {

    private ApiPrefixConfig config;
    private PathMatchConfigurer configurer;

    @BeforeEach
    void setUp() {
        config = new ApiPrefixConfig();
        configurer = mock(PathMatchConfigurer.class);
    }

    @Test
    void testConfigurePathMatch_addsPrefixCorrectly() {
        // Arrange
        ArgumentCaptor<Predicate<Class<?>>> predicateCaptor = ArgumentCaptor.forClass(Predicate.class);
        when(configurer.addPathPrefix(eq("/api"), predicateCaptor.capture())).thenReturn(configurer);

        // Act
        config.configurePathMatch(configurer);

        // Assert
        verify(configurer, times(1)).addPathPrefix(eq("/api"), any());

        // Simule un contrôleur dans le bon package
        @RestController
        class MyController {}
        boolean match = predicateCaptor.getValue().test(MyController.class);
        assertTrue(match, "Controllers du package cible devraient avoir le préfixe /api");
    }

    @Test
    void testConfigurePathMatch_doesNotAddPrefixForOtherPackages() {
        // Arrange
        ArgumentCaptor<Predicate<Class<?>>> predicateCaptor = ArgumentCaptor.forClass(Predicate.class);
        when(configurer.addPathPrefix(eq("/api"), predicateCaptor.capture())).thenReturn(configurer);

        // Act
        config.configurePathMatch(configurer);

        // Simule un contrôleur dans un autre package
        @RestController
        class ExternalController {
        }

        // Fake package différent
        assertFalse(predicateCaptor.getValue().test(ExternalController.class),
                "Les contrôleurs hors de com.lma.apiresponse.controller ne doivent pas être préfixés");
    }

    @Test
    void testConfigurePathMatch_doesNotFailWhenNoRestControllerAnnotation() {
        // Arrange
        ArgumentCaptor<Predicate<Class<?>>> predicateCaptor = ArgumentCaptor.forClass(Predicate.class);
        when(configurer.addPathPrefix(eq("/api"), predicateCaptor.capture())).thenReturn(configurer);

        // Act
        config.configurePathMatch(configurer);

        // Contrôleur sans @RestController
        class SimpleClass {}
        assertFalse(predicateCaptor.getValue().test(SimpleClass.class),
                "Les classes sans @RestController ne doivent pas être préfixées");
    }
}
