package com.lma.apiresponse.api.response;

import com.lma.apiresponse.api.annotation.NoWrap;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.Mockito;
import org.springframework.core.MethodParameter;
import org.springframework.http.*;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.server.ServerHttpRequest;
import org.springframework.http.server.ServerHttpResponse;
import org.springframework.http.server.ServletServerHttpResponse;

import java.lang.reflect.Method;
import java.net.URI;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

class SuccessResponseBodyAdviceTest {

    private SuccessResponseBodyAdvice advice;
    private ServerHttpRequest mockRequest;
    private ServerHttpResponse mockResponse;

    @BeforeEach
    void setUp() {
        advice = new SuccessResponseBodyAdvice();
        mockRequest = mock(ServerHttpRequest.class);
        mockResponse = mock(ServerHttpResponse.class);

        // important : simuler un URI non nul
        when(mockRequest.getURI()).thenReturn(URI.create("http://localhost/api/test"));
    }

    @Test
    void testSupports_shouldReturnFalse_whenClassAnnotatedWithNoWrap() throws Exception {
        Method method = NoWrapController.class.getMethod("getData");
        MethodParameter mp = new MethodParameter(method, -1);
        assertFalse(advice.supports(mp, null));
    }

    @Test
    void testSupports_shouldReturnFalse_whenMethodAnnotatedWithNoWrap() throws Exception {
        Method method = NormalController.class.getMethod("noWrapMethod");
        MethodParameter mp = new MethodParameter(method, -1);
        assertFalse(advice.supports(mp, null));
    }

    @Test
    void testSupports_shouldReturnTrue_whenNoAnnotations() throws Exception {
        Method method = NormalController.class.getMethod("normalMethod");
        MethodParameter mp = new MethodParameter(method, -1);
        assertTrue(advice.supports(mp, null));
    }

    @Test
    void testBeforeBodyWrite_shouldReturnApiResponseAsIs() {
        ApiResponse<Object> body = ApiResponse.ok("data", Map.of("meta", "ok"));
        Object result = advice.beforeBodyWrite(body, null, MediaType.APPLICATION_JSON,
                null, mockRequest, mockResponse);
        assertSame(body, result);
    }

    @Test
    void testBeforeBodyWrite_shouldReturnResponseEntityWithApiResponseInside() {
        ApiResponse<Object> apiResponse = ApiResponse.ok("ok", Map.of("meta", "meta"));
        ResponseEntity<Object> responseEntity = ResponseEntity.ok(apiResponse);

        Object result = advice.beforeBodyWrite(responseEntity, null, MediaType.APPLICATION_JSON,
                null, mockRequest, mockResponse);

        assertSame(responseEntity, result);
    }

    @Test
    void testBeforeBodyWrite_shouldWrapResponseEntityBody() {
        ResponseEntity<Object> input = ResponseEntity.status(HttpStatus.CREATED).body("DATA");

        Object result = advice.beforeBodyWrite(input, null, MediaType.APPLICATION_JSON,
                null, mockRequest, mockResponse);
        assertInstanceOf(ResponseEntity.class, result);

        ResponseEntity<?> entity = (ResponseEntity<?>) result;
        assertEquals(HttpStatus.CREATED, entity.getStatusCode());
        assertInstanceOf(ApiResponse.class, entity.getBody());
    }

    @Test
    void testBeforeBodyWrite_shouldWrapStringAsJson() {
        Object result = advice.beforeBodyWrite("hello", null, MediaType.APPLICATION_JSON,
                null, mockRequest, mockResponse);

        assertTrue(result instanceof String);
        assertTrue(((String) result).contains("\"data\":\"hello\""));
    }

    @Test
    void testBeforeBodyWrite_shouldReturnNull_whenBodyIsNull() {
        Object result = advice.beforeBodyWrite(null, null, MediaType.APPLICATION_JSON,
                null, mockRequest, mockResponse);
        assertNull(result);
    }

    @Test
    void testBeforeBodyWrite_shouldReturnCreatedApiResponse_whenStatusIsCreated() {
        ServletServerHttpResponse servletResponse = mock(ServletServerHttpResponse.class);
        jakarta.servlet.http.HttpServletResponse servlet = mock(jakarta.servlet.http.HttpServletResponse.class);
        when(servlet.getStatus()).thenReturn(201);
        when(servletResponse.getServletResponse()).thenReturn(servlet);

        Object result = advice.beforeBodyWrite("body", null, MediaType.APPLICATION_JSON,
                null, mockRequest, servletResponse);

        assertInstanceOf(ApiResponse.class, result);
    }

    @Test
    void testBeforeBodyWrite_shouldReturnOkApiResponse_whenStatusIs200() {
        ServletServerHttpResponse servletResponse = mock(ServletServerHttpResponse.class);
        jakarta.servlet.http.HttpServletResponse servlet = mock(jakarta.servlet.http.HttpServletResponse.class);
        when(servlet.getStatus()).thenReturn(200);
        when(servletResponse.getServletResponse()).thenReturn(servlet);

        Object result = advice.beforeBodyWrite("body", null, MediaType.APPLICATION_JSON,
                null, mockRequest, servletResponse);

        assertInstanceOf(ApiResponse.class, result);
    }

    // --- Contr√¥leurs fictifs ---
    @NoWrap
    static class NoWrapController {
        public String getData() { return "ok"; }
    }

    static class NormalController {
        @NoWrap
        public String noWrapMethod() { return "ignored"; }
        public String normalMethod() { return "wrapped"; }
    }
}
